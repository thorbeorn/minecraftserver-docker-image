{"version":3,"file":"497.main.bundle.js","mappings":"sIAMAA,EAAAA,GAAMC,SAASC,EAAAA,IAGf,IAAMC,EAAqBC,SAASC,eAAe,iBAsB7CC,EAAe,IAAIN,EAAAA,GAAMG,EAAoB,CACjDI,KAAM,OACNC,KArBuB,CACvBC,OAAQ,GACRC,SAAU,CACR,CACEC,MAAO,aACPH,KAAM,GACNI,YAAa,wBACbC,MAAM,GAER,CACEF,MAAO,aACPH,KAAM,GACNI,YAAa,wBACbC,MAAM,KASVC,QAAS,CACPC,QAAS,CACLb,KAAM,CACFc,IAAK,CACDC,SAAS,EACTC,KAAM,MAEVhB,KAAM,CACFiB,MAAO,CACHF,SAAS,GAEbG,KAAM,CACFH,SAAS,GAEbI,MAAO,CACHJ,SAAS,GAEbC,KAAM,QAIlBI,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACNC,EAAG,CACDC,aAAa,EACbC,IAAK,EACLC,IAAK,IACLC,MAAO,CAELC,SAAU,SAASC,EAAOC,EAAOC,GAC/B,OAAOF,EAAQ,KACjB,QASV,SAASG,EAAmBC,EAAUC,GAEpC,IACMzB,GADc,IAAI0B,MACEC,qBAG1BhC,EAAaE,KAAKC,OAAO8B,KAAK5B,GAC9BL,EAAaE,KAAKE,SAAS,GAAGF,KAAK+B,KAAKJ,GACxC7B,EAAaE,KAAKE,SAAS,GAAGF,KAAK+B,KAAKH,GAGpC9B,EAAaE,KAAKC,OAAO+B,OAAS,KACpClC,EAAaE,KAAKC,OAAOgC,QACzBnC,EAAaE,KAAKE,SAAS,GAAGF,KAAKiC,QACnCnC,EAAaE,KAAKE,SAAS,GAAGF,KAAKiC,SAIrCnC,EAAaoC,QACf,CAOe,SAASC,IAEpBC,aAAY,WAGVV,EAFuC,IAAhBW,KAAKC,SACe,IAAhBD,KAAKC,SAElC,GAAG,IACP,CAVAZ,EAAmB,IAAK,I","sources":["webpack:///./public/src/networkChart.js"],"sourcesContent":["// Import de Chart.js et du plugin de zoom\r\n\r\nimport Chart from 'chart.js/auto';\r\nimport zoom from 'chartjs-plugin-zoom';\r\n\r\n// Enregistrez le plugin de zoom\r\nChart.register(zoom);\r\n\r\n// Récupérez l'élément canvas\r\nconst networkChartCanvas = document.getElementById('network-chart');\r\n\r\n// Définissez les données du graphique de Network Usage\r\nconst networkChartData = {\r\n  labels: [], // Ce tableau contiendra les étiquettes (par exemple, les heures)\r\n  datasets: [\r\n    {\r\n      label: 'Débit émis',\r\n      data: [], // Ce tableau contiendra les données pour le débit émis\r\n      borderColor: 'rgba(75, 192, 192, 1)',\r\n      fill: false\r\n    },\r\n    {\r\n      label: 'Débit reçu',\r\n      data: [], // Ce tableau contiendra les données pour le débit reçu\r\n      borderColor: 'rgba(255, 99, 132, 1)',\r\n      fill: false\r\n    }\r\n  ]\r\n};\r\n\r\n// Créez le graphique de Network Usage en utilisant Chart.js\r\nconst networkChart = new Chart(networkChartCanvas, {\r\n  type: 'line',\r\n  data: networkChartData,\r\n  options: {\r\n    plugins: {\r\n        zoom: {\r\n            pan: {\r\n                enabled: true,\r\n                mode: 'xy'\r\n            },\r\n            zoom: {\r\n                wheel: {\r\n                    enabled: true,\r\n                },\r\n                drag: {\r\n                    enabled: true,\r\n                },\r\n                pinch: {\r\n                    enabled: true,\r\n                },\r\n                mode: 'xy'\r\n            }\r\n        }\r\n    },\r\n    responsive: true, \r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        min: 0, // Définir le minimum de l'axe des y à 0\r\n        max: 1000, // Définir le maximum de l'axe des y à 1000\r\n        ticks: {\r\n          // Formattez les valeurs affichées pour inclure ' Mb' après le nombre\r\n          callback: function(value, index, values) {\r\n            return value + ' Mb';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\n\r\n// Exemple de mise à jour du graphique avec de nouvelles données\r\nfunction updateNetworkChart(sentData, receivedData) {\r\n  // Générer les labels correspondant à l'heure actuelle\r\n  const currentTime = new Date();\r\n  const label = currentTime.toLocaleTimeString();\r\n\r\n  // Mettre à jour les données du graphique de Network Usage avec les nouvelles données fournies\r\n  networkChart.data.labels.push(label);\r\n  networkChart.data.datasets[0].data.push(sentData);\r\n  networkChart.data.datasets[1].data.push(receivedData);\r\n\r\n  // Si le tableau labels a plus de 60 éléments, supprimez le premier élément\r\n  if (networkChart.data.labels.length > 60) {\r\n    networkChart.data.labels.shift();\r\n    networkChart.data.datasets[0].data.shift();\r\n    networkChart.data.datasets[1].data.shift();\r\n  }\r\n\r\n  // Mettre à jour le graphique\r\n  networkChart.update();\r\n}\r\n\r\n// Exemple d'utilisation : mettre à jour le graphique de Network Usage avec de nouvelles données\r\n// Remplacez les valeurs des arguments sentData et receivedData par vos propres valeurs\r\nupdateNetworkChart(100, 200); // Exemple avec des valeurs de débit émis et reçu\r\n\r\n\r\nexport default function createNetworkChart() {\r\n    // Exemple de mise à jour du graphique avec de nouvelles données toutes les 5 secondes\r\n    setInterval(() => {\r\n      const randomSentData = Math.random() * 1000;\r\n      const randomReceivedData = Math.random() * 1000;\r\n      updateNetworkChart(randomSentData, randomReceivedData);\r\n    }, 5000);\r\n}"],"names":["Chart","register","zoom","networkChartCanvas","document","getElementById","networkChart","type","data","labels","datasets","label","borderColor","fill","options","plugins","pan","enabled","mode","wheel","drag","pinch","responsive","maintainAspectRatio","scales","y","beginAtZero","min","max","ticks","callback","value","index","values","updateNetworkChart","sentData","receivedData","Date","toLocaleTimeString","push","length","shift","update","createNetworkChart","setInterval","Math","random"],"sourceRoot":""}